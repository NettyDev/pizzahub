generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Wygenerowane przez better-auth

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Order         Order[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  surname    String
  phone      String?
  agreement1 Boolean
  agreement2 Boolean
  agreement3 Boolean
  Address    Address[]
  Company    Company[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Koniec wygenerowanej części

model Address {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  street  String?
  suite   String?
  zipcode String?
  city    String?

  @@map("address")
}

model Company {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  nip     String
  name    String
  street  String
  suite   String
  zipcode String
  city    String

  @@map("company")
}

// Nasze pizze w ofercie

model Product {
  id Int @id @default(autoincrement())

  name  String // nazwa pizzy
  image String // link lub id obrazka
  spice Int    @default(1) // poziom ostrości pizzy (pole opcjonalne)
  price Float // Może cena obliczana na podstawie użytych składników?

  Product_Ingredient      Product_Ingredient[]
  ProductOrder            ProductOrder[]
  ProductAddon_Ingredient ProductAddon_Ingredient[]

  @@map("product")
}

// Tablica many-many dla pizz i składników

model Product_Ingredient {
  id Int @id @default(autoincrement())

  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int

  @@map("product_ingredient")
}

// Tablica many-many dla dostępnych dodatków do pizzy
model ProductAddon_Ingredient {
  id Int @id @default(autoincrement())

  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int

  @@map("product_addon_ingredient")
}

// Składnik do pizz - na podstawie ich możemy określić cenę końcową oraz dostępność pizz

model Ingredient {
  id Int @id @default(autoincrement())

  name     String // nazwa składnika
  quantity Int    @default(0) // ilość składników na magazynie
  price    Float // cena

  Product_Ingredient      Product_Ingredient[]
  Composition_Ingredient  Composition_Ingredient[]
  ProductOrder_Ingredient ProductOrder_Ingredient[]
  ProductAddon_Ingredient ProductAddon_Ingredient[]

  @@map("ingredient")
}

// Rodzaj ciasta do wyboru

model DoughType {
  id Int @id @default(autoincrement())

  name  String // cienkie, grube
  price Float // cena dodatkowa

  ProductOrder     ProductOrder[]
  CompositionOrder CompositionOrder[]

  @@map("doughType")
}

// Rozmiar pizzy

model Size {
  id Int @id @default(autoincrement())

  name       String // mała, średnia, duża
  priceRatio Float // współczynnik ceny 1, 1.2, 1.4

  ProductOrder     ProductOrder[]
  CompositionOrder CompositionOrder[]

  @@map("size")
}

// Dodatkowe składniki do gotowej pizzy

model ProductOrder_Ingredient {
  id Int @id @default(autoincrement())

  ingredient     Ingredient   @relation(fields: [ingredientId], references: [id])
  ingredientId   Int
  productOrder   ProductOrder @relation(fields: [productOrderId], references: [id])
  productOrderId Int

  @@map("product_order_ingredient")
}

model ProductOrder {
  id Int @id @default(autoincrement())

  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  size        Size      @relation(fields: [sizeId], references: [id])
  sizeId      Int
  doughType   DoughType @relation(fields: [doughTypeId], references: [id])
  doughTypeId Int
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  price       Float // cena za sztuke
  quantity    Int       @default(1)

  ProductOrder_Ingredient ProductOrder_Ingredient[]

  @@map("product_order")
}

// Składniki do kompozycji

model Composition_Ingredient {
  id Int @id @default(autoincrement())

  ingredient         Ingredient       @relation(fields: [ingredientId], references: [id])
  ingredientId       Int
  compositionOrder   CompositionOrder @relation(fields: [compositionOrderId], references: [id])
  compositionOrderId Int

  @@map("composition_ingredients")
}

// Kompozycja

model CompositionOrder {
  id Int @id @default(autoincrement())

  size        Size      @relation(fields: [sizeId], references: [id])
  sizeId      Int
  doughType   DoughType @relation(fields: [doughTypeId], references: [id])
  doughTypeId Int
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  price       Float // cena po skomponowaniu pizzy za sztuke
  quantity    Int       @default(1)

  Composition_Ingredient Composition_Ingredient[]

  @@map("composition_order")
}

// Zamówienie

model Order {
  id Int @id @default(autoincrement())

  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  price        Float
  payment      String
  delivery     String
  status       String
  comment      String
  orderDate    DateTime
  deliveryDate DateTime

  orderContact   OrderContact  @relation(fields: [orderContactId], references: [id])
  orderContactId Int           @unique
  orderAddress   OrderAddress  @relation(fields: [orderAddressId], references: [id])
  orderAddressId Int           @unique
  orderCompany   OrderCompany? @relation(fields: [orderCompanyId], references: [id])
  orderCompanyId Int?          @unique

  ProductOrder     ProductOrder[]
  CompositionOrder CompositionOrder[]

  @@map("order")
}

model OrderContact {
  id Int @id @default(autoincrement())

  name    String
  surname String
  phone   String
  email   String
  Order   Order[]

  @@map("order_contact")
}

model OrderAddress {
  id      Int     @id @default(autoincrement())
  street  String
  suite   String
  zipcode String
  city    String
  Order   Order[]

  @@map("order_address")
}

model OrderCompany {
  id Int @id @default(autoincrement())

  nip     String
  name    String
  street  String
  suite   String
  zipcode String
  city    String
  Order   Order[]

  @@map("order_company")
}
