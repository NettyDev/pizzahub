generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Order         Order[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  surname    String
  phone      String?
  agreement1 Boolean
  agreement2 Boolean
  agreement3 Boolean
  Address    Address[]
  Company    Company[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Address {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  street  String?
  suite   String?
  zipcode String?
  city    String?

  @@map("address")
}

model Company {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  nip     String?
  name    String?
  street  String?
  suite   String?
  zipcode String?
  city    String?

  @@map("company")
}

model Pizza {
  id Int @id @default(autoincrement())

  name        String
  image       String
  spice       Int    @default(1)
  priceSmall  Float  @default(30)
  priceMedium Float  @default(40)
  priceLarge  Float  @default(50)

  Pizza_Ingredient         Pizza_Ingredient[]
  PizzaOrder               PizzaOrder[]
  PizzaToppings_Ingredient PizzaToppings_Ingredient[]

  @@map("pizza")
}

model Pizza_Ingredient {
  id Int @id @default(autoincrement())

  pizza        Pizza      @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  pizzaId      Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId Int

  @@map("pizza_ingredient")
}

model PizzaToppings_Ingredient {
  id Int @id @default(autoincrement())

  pizza        Pizza      @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  pizzaId      Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId Int

  @@map("pizza_toppings_ingredient")
}

model Ingredient {
  id Int @id @default(autoincrement())

  name                String
  icon                String?
  image               String?
  zIndex              Int?
  category            String  @default("other") // other, sauce, cheese, meat, vegetable - dla kompozytora
  avaliableInComposer Boolean @default(false) // Czy składnik ma być w kompozytorze
  quantity            Int     @default(0) // Ilość składników na magazynie (propozycja)
  price               Float // Cena dla kompozytora

  Pizza_Ingredient         Pizza_Ingredient[]
  Composition_Ingredient   Composition_Ingredient[]
  PizzaOrder_Ingredient    PizzaOrder_Ingredient[]
  PizzaToppings_Ingredient PizzaToppings_Ingredient[]

  @@map("ingredient")
}

model PizzaOrder_Ingredient {
  id Int @id @default(autoincrement())

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId Int
  pizzaOrder   PizzaOrder @relation(fields: [pizzaOrderId], references: [id], onDelete: Cascade)
  pizzaOrderId Int

  @@map("pizza_order_ingredient")
}

model PizzaOrder {
  id Int @id @default(autoincrement())

  name     String // nazwa pizzy na wypadek usunięcia pizzy z tabeli
  pizza    Pizza? @relation(fields: [pizzaId], references: [id], onDelete: SetNull)
  pizzaId  Int?
  size     String // small, medium, large
  dough    String // thin, thick
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
  price    Float // cena za sztuke
  quantity Int    @default(1)

  PizzaOrder_Ingredient PizzaOrder_Ingredient[]

  @@map("pizza_order")
}

model Composition_Ingredient {
  id Int @id @default(autoincrement())

  ingredient         Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId       Int
  compositionOrder   CompositionOrder @relation(fields: [compositionOrderId], references: [id], onDelete: Cascade)
  compositionOrderId Int

  @@map("composition_ingredients")
}

model CompositionOrder {
  id Int @id @default(autoincrement())

  size     String // small, medium, large
  dough    String // thin, thick
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
  price    Float // cena za sztuke
  quantity Int    @default(1)

  Composition_Ingredient Composition_Ingredient[]

  @@map("composition_order")
}

model Order {
  id Int @id @default(autoincrement())

  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  price        Float
  payment      String
  delivery     String
  status       String // in_progress, completed, cancelled
  comment      String
  orderDate    DateTime
  deliveryDate DateTime?
  deliveryHour String?

  orderContact   OrderContact  @relation(fields: [orderContactId], references: [id], onDelete: Cascade)
  orderContactId Int           @unique
  orderAddress   OrderAddress? @relation(fields: [orderAddressId], references: [id], onDelete: Cascade)
  orderAddressId Int?          @unique
  orderCompany   OrderCompany? @relation(fields: [orderCompanyId], references: [id], onDelete: Cascade)
  orderCompanyId Int?          @unique

  PizzaOrder       PizzaOrder[]
  CompositionOrder CompositionOrder[]

  @@map("order")
}

model OrderContact {
  id Int @id @default(autoincrement())

  name    String
  surname String
  phone   String
  email   String
  Order   Order[]

  @@map("order_contact")
}

model OrderAddress {
  id      Int     @id @default(autoincrement())
  street  String
  suite   String
  zipcode String
  city    String
  Order   Order[]

  @@map("order_address")
}

model OrderCompany {
  id Int @id @default(autoincrement())

  nip     String
  name    String
  street  String
  suite   String
  zipcode String
  city    String
  Order   Order[]

  @@map("order_company")
}
