generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Wygenerowane przez better-auth
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Order         Order[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Koniec wygenerowanej części

// Nasze pizze w ofercie
model Product {
  id Int @id @default(autoincrement())

  name        String // nazwa pizzy
  description String // opis pizzy
  spice       Int? // poziom ostrości pizzy (pole opcjonalne)
  basePrice   Float // Może cena obliczana na podstawie użytych składników?

  Product_Ingredient Product_Ingredient[]
  ProductOrder       ProductOrder[]

  @@map("product")
}

// Tablica many-many dla pizz i składników
model Product_Ingredient {
  id Int @id @default(autoincrement())

  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int

  @@map("product_ingredient")
}

// Składnik do pizz - na podstawie ich możemy określić cenę końcową oraz dostępność pizz
model Ingredient {
  id Int @id @default(autoincrement())

  name     String // nazwa składnika
  // description String // opis składnika
  quantity Int    @default(0) // ilość składników na magazynie
  price    Float // cena dla kreatora (możliwe że nie tylko)

  Product_Ingredient      Product_Ingredient[]
  Composition_Ingredient  Composition_Ingredient[]
  ProductOrder_Ingredient ProductOrder_Ingredient[]

  @@map("ingredient")
}

// Rodzaj ciasta do wyboru
model DoughType {
  id Int @id @default(autoincrement())

  name        String // francuskie, pan, ser w brzegach, itd
  description String // krótki opis - czy zostawiamy?
  price       Float // cena dodatkowa

  ProductOrder     ProductOrder[]
  CompositionOrder CompositionOrder[]

  @@map("doughType")
}

// Rozmiar pizzy
model Size {
  id Int @id @default(autoincrement())

  name        String // mała, średnia, duża, max, itd
  description String // krótki opis - czy zostawiamy?
  size        Int // rozmiar w cm
  price       Float // cena dodatkowa

  ProductOrder     ProductOrder[]
  CompositionOrder CompositionOrder[]

  @@map("size")
}

// DoughType i Size wydają się być dobrą alternatywą od tego aby na każdy wariant ustalać dla każdej pizzy osobno

// Dodatki do pizzy np. sosy, napoje
model Addon {
  id Int @id @default(autoincrement())

  name        String // nazwa dodatku
  description String // krótki opis
  price       Float // cena dodatku

  ProductOrder_Addon ProductOrder_Addon[]
  Composition_Addon  Composition_Addon[]

  @@map("addon")
}

// Dodatkowe składniki do gotowej pizzy
model ProductOrder_Ingredient {
  id Int @id @default(autoincrement())

  ingredient     Ingredient   @relation(fields: [ingredientId], references: [id])
  ingredientId   Int
  productOrder   ProductOrder @relation(fields: [productOrderId], references: [id])
  productOrderId Int
  quantity       Int          @default(1) // ilość dodatkowego składnika na pizzy

  @@map("product_order_ingredient")
}

// Dodatki do pizzy (np. sosy, napoje)
model ProductOrder_Addon {
  id Int @id @default(autoincrement())

  addon          Addon        @relation(fields: [addonId], references: [id])
  addonId        Int
  productOrder   ProductOrder @relation(fields: [productOrderId], references: [id])
  productOrderId Int
  quantity       Int          @default(1) // ilość danego dodatku

  @@map("product_order_addon")
}

// Produkt gotowy do zamówienia
model ProductOrder {
  id Int @id @default(autoincrement())

  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  size        Size      @relation(fields: [sizeId], references: [id])
  sizeId      Int
  doughType   DoughType @relation(fields: [doughTypeId], references: [id])
  doughTypeId Int
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  price       Float // cena końcowa pizzy
  quantity    Int       @default(1)

  ProductOrder_Ingredient ProductOrder_Ingredient[]
  ProductOrder_Addon      ProductOrder_Addon[]

  @@map("product_order")
}

// Składniki do kompozycji
model Composition_Ingredient {
  id Int @id @default(autoincrement())

  ingredient         Ingredient       @relation(fields: [ingredientId], references: [id])
  ingredientId       Int
  compositionOrder   CompositionOrder @relation(fields: [compositionOrderId], references: [id])
  compositionOrderId Int
  quantity           Int              @default(1) // ilość składnika na komponowanej pizzy

  @@map("composition_ingredients")
}

// Dodatki do kompozycji
model Composition_Addon {
  id Int @id @default(autoincrement())

  addon              Addon            @relation(fields: [addonId], references: [id])
  addonId            Int
  compositionOrder   CompositionOrder @relation(fields: [compositionOrderId], references: [id])
  compositionOrderId Int
  quantity           Int              @default(1) // ilość dodatków

  @@map("composition_addon")
}

// Kompozycja
model CompositionOrder {
  id Int @id @default(autoincrement())

  size        Size      @relation(fields: [sizeId], references: [id])
  sizeId      Int
  doughType   DoughType @relation(fields: [doughTypeId], references: [id])
  doughTypeId Int
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  quantity    Int       @default(1)
  price       Float // cena po skomponowaniu pizzy

  Composition_Ingredient Composition_Ingredient[]
  Composition_Addon      Composition_Addon[]

  @@map("composition_order")
}

// Zamówienie
model Order {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  price  Float
  // payment // do zdefiniowania
  // delivery // do zdefiniowania

  ProductOrder     ProductOrder[]
  CompositionOrder CompositionOrder[]

  @@map("order")
}
